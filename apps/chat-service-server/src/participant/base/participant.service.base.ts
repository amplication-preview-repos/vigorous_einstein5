/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Participant as PrismaParticipant } from "@prisma/client";

export class ParticipantServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ParticipantCountArgs, "select">
  ): Promise<number> {
    return this.prisma.participant.count(args);
  }

  async participants<T extends Prisma.ParticipantFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ParticipantFindManyArgs>
  ): Promise<PrismaParticipant[]> {
    return this.prisma.participant.findMany<Prisma.ParticipantFindManyArgs>(
      args
    );
  }
  async participant<T extends Prisma.ParticipantFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ParticipantFindUniqueArgs>
  ): Promise<PrismaParticipant | null> {
    return this.prisma.participant.findUnique(args);
  }
  async createParticipant<T extends Prisma.ParticipantCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ParticipantCreateArgs>
  ): Promise<PrismaParticipant> {
    return this.prisma.participant.create<T>(args);
  }
  async updateParticipant<T extends Prisma.ParticipantUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ParticipantUpdateArgs>
  ): Promise<PrismaParticipant> {
    return this.prisma.participant.update<T>(args);
  }
  async deleteParticipant<T extends Prisma.ParticipantDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ParticipantDeleteArgs>
  ): Promise<PrismaParticipant> {
    return this.prisma.participant.delete(args);
  }
}
